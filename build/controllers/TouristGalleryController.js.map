{"version":3,"sources":["../../src/controllers/TouristGalleryController.js"],"names":["TouristGalleryController","req","res","galleries","query","name","Op","Sequelize","options","where","like","TouristGalleryRepository","search","getData","json","attractionId","params","idAttraction","getAttractionGallery","console","error","message","status","send","id","detail","gallery","errors","isEmpty","array","thumbnail","file","path","resize","height","toBuffer","err","buffer","fs","writeFile","filename","body","title","touristAttractionId","create","data","update","destroy","msg"],"mappings":"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","file":"TouristGalleryController.js","sourcesContent":["import { validationResult } from \"express-validator/check\";\r\nimport { Sequelize } from \"../database/models\";\r\nimport TouristGalleryRepository from \"../repositories/TouristGalleryRepository\";\r\nimport sharp from \"sharp\";\r\nimport fs from \"fs\";\r\n\r\nclass TouristGalleryController {\r\n  static async index(req, res) {\r\n    let galleries = [];\r\n    const query = req.query.name;\r\n    if (query) {\r\n      const Op = Sequelize.Op;\r\n      const options = {\r\n        where: {\r\n          name: {\r\n            [Op.like]: `%${query}%`\r\n          }\r\n        }\r\n      };\r\n\r\n      galleries = await TouristGalleryRepository.search(req, options);\r\n    } else {\r\n      galleries = await TouristGalleryRepository.getData(req);\r\n    }\r\n    res.json(galleries);\r\n  }\r\n\r\n  static async attractionGallery(req, res) {\r\n    const attractionId = req.params.idAttraction;\r\n    try {\r\n      const galleries = await TouristGalleryRepository.getAttractionGallery(\r\n        attractionId\r\n      );\r\n      return res.json(galleries);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n      res.status(500).send(\"Server Error\");\r\n    }\r\n  }\r\n\r\n  static async detail(req, res) {\r\n    const id = req.params.id;\r\n    const gallery = await TouristGalleryRepository.detail(id);\r\n\r\n    if (!gallery) {\r\n      return res.status(404).json({ errors: \"gallery not found\" });\r\n    }\r\n\r\n    res.json(gallery);\r\n  }\r\n\r\n  static async store(req, res) {\r\n    const errors = validationResult(req);\r\n    if (!errors.isEmpty()) {\r\n      return res.status(400).json({ errors: errors.array() });\r\n    }\r\n\r\n    let thumbnail = \"\";\r\n    if (req.file) {\r\n      sharp(req.file.path)\r\n        .resize({\r\n          height: 500\r\n        })\r\n        .toBuffer((err, buffer) => {\r\n          fs.writeFile(`./uploads/${req.file.filename}`, buffer, e => {});\r\n        });\r\n\r\n      thumbnail = req.file.filename;\r\n    }\r\n\r\n    const { title, touristAttractionId } = req.body;\r\n    try {\r\n      const gallery = await TouristGalleryRepository.create({\r\n        title: title,\r\n        touristAttractionId: touristAttractionId,\r\n        thumbnail: thumbnail\r\n      });\r\n      res.json(gallery);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n      res.status(500).send(\"Server Error\");\r\n    }\r\n  }\r\n\r\n  static async update(req, res) {\r\n    const errors = validationResult(req);\r\n    if (!errors.isEmpty()) {\r\n      return res.status(400).json({ errors: errors.array() });\r\n    }\r\n\r\n    const { title, touristAttractionId } = req.body;\r\n\r\n    let data = {\r\n      title: title,\r\n      touristAttractionId: touristAttractionId\r\n    };\r\n\r\n    if (req.file) {\r\n      sharp(req.file.path)\r\n        .resize({\r\n          height: 500\r\n        })\r\n        .toBuffer((err, buffer) => {\r\n          fs.writeFile(`./uploads/${req.file.filename}`, buffer, e => {});\r\n        });\r\n\r\n      data.thumbnail = req.file.filename;\r\n    }\r\n\r\n    try {\r\n      const id = req.params.id;\r\n      let gallery = await TouristGalleryRepository.detail(id);\r\n\r\n      if (!gallery) {\r\n        return res.status(404).json({ errors: \"gallery not found\" });\r\n      }\r\n\r\n      await TouristGalleryRepository.update(data, {\r\n        where: {\r\n          id: id\r\n        }\r\n      });\r\n\r\n      gallery = await TouristGalleryRepository.detail(id);\r\n      res.json(gallery);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n      res.status(500).send(\"server error\");\r\n    }\r\n  }\r\n\r\n  static async delete(req, res) {\r\n    const id = req.params.id;\r\n    let gallery = await TouristGalleryRepository.detail(id);\r\n\r\n    if (!gallery) {\r\n      return res.status(404).json({ errors: \"gallery not found\" });\r\n    }\r\n\r\n    try {\r\n      await TouristGalleryRepository.destroy({\r\n        where: {\r\n          id: id\r\n        }\r\n      });\r\n\r\n      res.json({ msg: \"Gallery removed\" });\r\n    } catch (err) {\r\n      console.error(err.message);\r\n      res.status(500).send(\"Server Error\");\r\n    }\r\n  }\r\n}\r\n\r\nexport default TouristGalleryController;\r\n"]}