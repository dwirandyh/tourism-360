{"version":3,"sources":["../../src/controllers/TouristAttractionController.js"],"names":["TouristAttractionController","req","res","attractions","query","name","Op","Sequelize","options","where","like","TouristAttractionRepository","search","getData","json","id","params","detail","tourist","status","errors","isEmpty","array","thumbnail","file","path","resize","height","toBuffer","err","buffer","fs","writeFile","filename","body","address","shortDescription","description","latitude","longitude","create","console","error","message","send","update","destroy","msg","popular","TouristGalleryRepository","getAttractionGallery","galleries","q","or","searchAttraction"],"mappings":"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","file":"TouristAttractionController.js","sourcesContent":["import { validationResult } from \"express-validator/check\";\r\nimport { Sequelize } from \"../database/models\";\r\nimport TouristAttractionRepository from \"../repositories/TouristAttractionRepository\";\r\nimport sharp from \"sharp\";\r\nimport fs from \"fs\";\r\nimport TouristGalleryRepository from \"../repositories/TouristGalleryRepository\";\r\n\r\nclass TouristAttractionController {\r\n  /**\r\n   * get all tourist with pagination\r\n   * @param {*} req\r\n   * @param {*} res\r\n   */\r\n  static async index(req, res) {\r\n    let attractions = [];\r\n    const query = req.query.name;\r\n    if (query) {\r\n      const Op = Sequelize.Op;\r\n      const options = {\r\n        where: {\r\n          name: {\r\n            [Op.like]: `%${query}%`\r\n          }\r\n        }\r\n      };\r\n\r\n      attractions = await TouristAttractionRepository.search(req, options);\r\n    } else {\r\n      attractions = await TouristAttractionRepository.getData(req);\r\n    }\r\n    res.json(attractions);\r\n  }\r\n\r\n  /**\r\n   * get detail tourist by id\r\n   * @param {*} req\r\n   * @param {*} res\r\n   */\r\n  static async detail(req, res) {\r\n    const id = req.params.id;\r\n    const tourist = await TouristAttractionRepository.detail(id);\r\n\r\n    if (!tourist) {\r\n      return res.status(404).json({ errors: \"tourist not found\" });\r\n    }\r\n\r\n    res.json(tourist);\r\n  }\r\n\r\n  /**\r\n   * insert new tourist\r\n   * @param {*} req\r\n   * @param {*} res\r\n   */\r\n  static async store(req, res) {\r\n    const errors = validationResult(req);\r\n    if (!errors.isEmpty()) {\r\n      return res.status(400).json({ errors: errors.array() });\r\n    }\r\n\r\n    let thumbnail = \"\";\r\n    if (req.file) {\r\n      // Resize image\r\n      sharp(req.file.path)\r\n        .resize({\r\n          height: 500\r\n        })\r\n        .toBuffer((err, buffer) => {\r\n          fs.writeFile(`./uploads/${req.file.filename}`, buffer, e => {});\r\n        });\r\n\r\n      thumbnail = req.file.filename;\r\n    }\r\n\r\n    const {\r\n      name,\r\n      address,\r\n      shortDescription,\r\n      description,\r\n      latitude,\r\n      longitude\r\n    } = req.body;\r\n    try {\r\n      const tourist = await TouristAttractionRepository.create({\r\n        name,\r\n        address,\r\n        shortDescription,\r\n        description,\r\n        latitude,\r\n        longitude,\r\n        thumbnail\r\n      });\r\n\r\n      res.json(tourist);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n      res.status(500).send(\"Server Error\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update tourist by id\r\n   * @param {*} req\r\n   * @param {*} res\r\n   */\r\n  static async update(req, res) {\r\n    const errors = validationResult(req);\r\n    if (!errors.isEmpty()) {\r\n      return res.status(400).json({ errors: errors.array() });\r\n    }\r\n    let thumbnail = \"\";\r\n    if (req.file) {\r\n      // Resize image\r\n      sharp(req.file.path)\r\n        .resize({\r\n          height: 500\r\n        })\r\n        .toBuffer((err, buffer) => {\r\n          fs.writeFile(`./uploads/${req.file.filename}`, buffer, e => {});\r\n        });\r\n\r\n      thumbnail = req.file.filename;\r\n    }\r\n\r\n    const {\r\n      name,\r\n      address,\r\n      shortDescription,\r\n      description,\r\n      latitude,\r\n      longitude\r\n    } = req.body;\r\n\r\n    try {\r\n      const id = req.params.id;\r\n      let tourist = await TouristAttractionRepository.detail(id);\r\n\r\n      if (!tourist) {\r\n        return res.status(404).json({ errors: \"tourist not found\" });\r\n      }\r\n\r\n      await TouristAttractionRepository.update(\r\n        {\r\n          name,\r\n          address,\r\n          shortDescription,\r\n          description,\r\n          latitude,\r\n          longitude,\r\n          thumbnail\r\n        },\r\n        {\r\n          where: {\r\n            id: id\r\n          }\r\n        }\r\n      );\r\n\r\n      tourist = await TouristAttractionRepository.detail(id);\r\n\r\n      res.json(tourist);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n      res.status(500).send(\"Server Error\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete tourist by id\r\n   * @param {*} req\r\n   * @param {*} res\r\n   */\r\n  static async delete(req, res) {\r\n    const id = req.params.id;\r\n    let tourist = await TouristAttractionRepository.detail(id);\r\n\r\n    if (!tourist) {\r\n      return res.status(404).json({ errors: \"tourist not found\" });\r\n    }\r\n\r\n    try {\r\n      await TouristAttractionRepository.destroy({\r\n        where: {\r\n          id: id\r\n        }\r\n      });\r\n\r\n      res.json({ msg: \"Tourist attraction removed\" });\r\n    } catch (err) {\r\n      console.error(err.message);\r\n      res.status(500).send(\"Server Error\");\r\n    }\r\n  }\r\n\r\n  // Public API\r\n\r\n  static async popular(req, res) {\r\n    try {\r\n      const attractions = await TouristAttractionRepository.popular();\r\n      return res.json(attractions);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n      res.status(500).send(\"Server Error\");\r\n    }\r\n  }\r\n\r\n  static async gallery(req, res) {\r\n    try {\r\n      const id = req.params.id;\r\n      const galleries = await TouristGalleryRepository.getAttractionGallery(id);\r\n      return res.json(galleries);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n      res.status(500).send(\"Server Error\");\r\n    }\r\n  }\r\n\r\n  static async searchAttraction(req, res) {\r\n    const query = req.query.q;\r\n    if (!query) {\r\n      return res.status(404).json({ msg: \"Keyword is required\" });\r\n    }\r\n    try {\r\n      const Op = Sequelize.Op;\r\n      const options = {\r\n        where: {\r\n          [Op.or]: [\r\n            {\r\n              name: {\r\n                [Op.like]: `%${query}%`\r\n              }\r\n            },\r\n            {\r\n              shortDescription: {\r\n                [Op.like]: `%${query}%`\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      };\r\n\r\n      const attractions = await TouristAttractionRepository.searchAttraction(\r\n        options\r\n      );\r\n      res.json(attractions);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n      res.status(500).send(\"Server Error\");\r\n    }\r\n  }\r\n}\r\n\r\nexport default TouristAttractionController;\r\n"]}