{"version":3,"sources":["../../src/controllers/CategoryController.js"],"names":["CategoryController","req","res","categories","query","name","Op","Sequelize","options","where","like","CategoryRepository","search","getData","json","getAllCategories","id","params","detail","category","status","errors","isEmpty","array","thumbnail","file","path","resize","height","toBuffer","err","buffer","fs","writeFile","filename","body","description","create","console","error","message","send","data","update","destroy","msg","getAttractionById","attractions"],"mappings":"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","file":"CategoryController.js","sourcesContent":["import { validationResult } from \"express-validator/check\";\r\nimport { Sequelize } from \"../database/models\";\r\nimport CategoryRepository from \"../repositories/CategoryRepository\";\r\nimport sharp from \"sharp\";\r\nimport fs from \"fs\";\r\n\r\nclass CategoryController {\r\n  /**\r\n   * get all category with pagination\r\n   * @param {*} req\r\n   * @param {*} res\r\n   */\r\n  static async index(req, res) {\r\n    let categories = [];\r\n    const query = req.query.name;\r\n    if (query) {\r\n      const Op = Sequelize.Op;\r\n      const options = {\r\n        where: {\r\n          name: {\r\n            [Op.like]: `%${query}%`\r\n          }\r\n        }\r\n      };\r\n\r\n      categories = await CategoryRepository.search(req, options);\r\n    } else {\r\n      categories = await CategoryRepository.getData(req);\r\n    }\r\n    res.json(categories);\r\n  }\r\n\r\n  static async all(req, res) {\r\n    const categories = await CategoryRepository.getAllCategories();\r\n    res.json(categories);\r\n  }\r\n\r\n  /**\r\n   * get detail category by id\r\n   * @param {*} req\r\n   * @param {*} res\r\n   */\r\n  static async detail(req, res) {\r\n    const id = req.params.id;\r\n    const category = await CategoryRepository.detail(id);\r\n\r\n    if (!category) {\r\n      return res.status(404).json({ errors: \"Category not found\" });\r\n    }\r\n\r\n    res.json(category);\r\n  }\r\n\r\n  /**\r\n   * insert new category\r\n   * @param {*} req\r\n   * @param {*} res\r\n   */\r\n  static async store(req, res) {\r\n    const errors = validationResult(req);\r\n    if (!errors.isEmpty()) {\r\n      return res.status(400).json({ errors: errors.array() });\r\n    }\r\n\r\n    let thumbnail = \"\";\r\n    if (req.file) {\r\n      // Resize image\r\n      sharp(req.file.path)\r\n        .resize({\r\n          height: 200\r\n        })\r\n        .toBuffer((err, buffer) => {\r\n          fs.writeFile(`./uploads/${req.file.filename}`, buffer, e => {});\r\n        });\r\n\r\n      thumbnail = req.file.filename;\r\n    }\r\n\r\n    const { name, description } = req.body;\r\n    try {\r\n      const category = await CategoryRepository.create({\r\n        name: name,\r\n        description: description,\r\n        thumbnail: thumbnail\r\n      });\r\n\r\n      res.json(category);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n      res.status(500).send(\"Server Error\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update category by id\r\n   * @param {*} req\r\n   * @param {*} res\r\n   */\r\n  static async update(req, res) {\r\n    const errors = validationResult(req);\r\n    if (!errors.isEmpty()) {\r\n      return res.status(400).json({ errors: errors.array() });\r\n    }\r\n\r\n    const { name, description } = req.body;\r\n\r\n    let data = {\r\n      name: name,\r\n      description: description\r\n    };\r\n\r\n    if (req.file) {\r\n      sharp(req.file.path)\r\n        .resize({\r\n          height: 500\r\n        })\r\n        .toBuffer((err, buffer) => {\r\n          fs.writeFile(`./uploads/${req.file.filename}`, buffer, e => {});\r\n        });\r\n\r\n      data.thumbnail = req.file.filename;\r\n    }\r\n\r\n    try {\r\n      const id = req.params.id;\r\n      let category = await CategoryRepository.detail(id);\r\n\r\n      if (!category) {\r\n        return res.status(404).json({ errors: \"Category not found\" });\r\n      }\r\n\r\n      await CategoryRepository.update(data, {\r\n        where: {\r\n          id: id\r\n        }\r\n      });\r\n\r\n      category = await CategoryRepository.detail(id);\r\n\r\n      res.json(category);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n      res.status(500).send(\"Server Error\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete category by id\r\n   * @param {*} req\r\n   * @param {*} res\r\n   */\r\n  static async delete(req, res) {\r\n    const id = req.params.id;\r\n    let category = await CategoryRepository.detail(id);\r\n\r\n    if (!category) {\r\n      return res.status(404).json({ errors: \"Category not found\" });\r\n    }\r\n\r\n    try {\r\n      await CategoryRepository.destroy({\r\n        where: {\r\n          id: id\r\n        }\r\n      });\r\n\r\n      res.json({ msg: \"Category removed\" });\r\n    } catch (err) {\r\n      console.error(err.message);\r\n      res.status(500).send(\"Server Error\");\r\n    }\r\n  }\r\n\r\n  static async getAttraction(req, res) {\r\n    const id = req.params.id;\r\n    let category = await CategoryRepository.detail(id);\r\n    if (!category) {\r\n      return res.status(404).json({ errors: \"Category not found\" });\r\n    }\r\n\r\n    try {\r\n      const attractions = await CategoryRepository.getAttractionById(id);\r\n      return res.json(attractions);\r\n    } catch (err) {\r\n      console.error(err.message);\r\n      res.status(500).send(\"Server Error\");\r\n    }\r\n  }\r\n}\r\n\r\nexport default CategoryController;\r\n"]}