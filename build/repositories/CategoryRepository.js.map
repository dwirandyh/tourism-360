{"version":3,"sources":["../../src/repositories/CategoryRepository.js"],"names":["CategoryRepository","Category","findAll","req","options","page","pageSize","paginate","id","findOne","where","create","data","update","destroy","TouristAttractions","categoryId"],"mappings":";;;;;;;;;;AAAA;;AACA;;;;;;IAEMA,kB;;;;;;;;;;;;;;uBAEWC,iBAASC,OAAT,E;;;;;;;;;;;;;;;;;;;;;;4FAGMC,G;;;;;;AACfC,uB,GAAU;AACZC,wBAAM,oBAAKF,GAAL,CADM;AAEZG,4BAAUA;AAFE,iB;;uBAIDL,iBAASM,QAAT,CAAkBH,OAAlB,C;;;;;;;;;;;;;;;;;;;;;;4FAGKD,G,EAAKC,O;;;;;AACvBA,uCACKA,OADL;AAEEC,wBAAM,oBAAKF,GAAL,CAFR;AAGEG,4BAAUA;AAHZ;;uBAKaL,iBAASM,QAAT,CAAkBH,OAAlB,C;;;;;;;;;;;;;;;;;;;;;;4FAGKI,E;;;;;;uBACLP,iBAASQ,OAAT,CAAiB;AAC5BC,yBAAO;AACLF,wBAAIA;AADC;AADqB,iBAAjB,C;;;;;;;;;;;;;;;;;;;;;;4FAOKJ,O;;;;;;uBACLH,iBAASU,MAAT,CAAgBP,OAAhB,C;;;;;;;;;;;;;;;;;;;;;;4FAGKQ,I,EAAMR,O;;;;;;uBACXH,iBAASY,MAAT,CAAgBD,IAAhB,EAAsBR,OAAtB,C;;;;;;;;;;;;;;;;;;;;;;4FAGMA,O;;;;;;uBACNH,iBAASa,OAAT,CAAiBV,OAAjB,C;;;;;;;;;;;;;;;;;;;;;;4FAGgBI,E;;;;;;uBAChBO,2BAAmBb,OAAnB,CAA2B;AACtCQ,yBAAO;AACLM,gCAAYR;AADP;AAD+B,iBAA3B,C;;;;;;;;;;;;;;;;;;;;;;;;kBAOFR,kB","file":"CategoryRepository.js","sourcesContent":["import { Category, TouristAttractions } from \"../database/models\";\r\nimport { page, pageSize } from \"../helpers/Paginate\";\r\n\r\nclass CategoryRepository {\r\n  static async getAllCategories() {\r\n    return await Category.findAll();\r\n  }\r\n\r\n  static async getData(req) {\r\n    let options = {\r\n      page: page(req),\r\n      pageSize: pageSize\r\n    };\r\n    return await Category.paginate(options);\r\n  }\r\n\r\n  static async search(req, options) {\r\n    options = {\r\n      ...options,\r\n      page: page(req),\r\n      pageSize: pageSize\r\n    };\r\n    return await Category.paginate(options);\r\n  }\r\n\r\n  static async detail(id) {\r\n    return await Category.findOne({\r\n      where: {\r\n        id: id\r\n      }\r\n    });\r\n  }\r\n\r\n  static async create(options) {\r\n    return await Category.create(options);\r\n  }\r\n\r\n  static async update(data, options) {\r\n    return await Category.update(data, options);\r\n  }\r\n\r\n  static async destroy(options) {\r\n    return await Category.destroy(options);\r\n  }\r\n\r\n  static async getAttractionById(id) {\r\n    return await TouristAttractions.findAll({\r\n      where: {\r\n        categoryId: id\r\n      }\r\n    });\r\n  }\r\n}\r\nexport default CategoryRepository;\r\n"]}