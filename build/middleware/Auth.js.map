{"version":3,"sources":["../../src/middleware/Auth.js"],"names":["req","res","next","token","header","status","json","msg","decoded","jwt","verify","JWT_SECRET","user","err"],"mappings":";;;;;;AAAA;;;;AACA;;;;kBAEe,UAACA,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACjC,MAAMC,QAAQH,IAAII,MAAJ,CAAW,cAAX,CAAd;;AAEA,MAAI,CAACD,KAAL,EAAY;AACV,WAAOF,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,KAAK,gCAAP,EAArB,CAAP;AACD;;AAED,MAAI;AACF,QAAMC,UAAUC,uBAAIC,MAAJ,CAAWP,KAAX,EAAkBQ,kBAAlB,CAAhB;AACAX,QAAIY,IAAJ,GAAWJ,QAAQI,IAAnB;AACAV;AACD,GAJD,CAIE,OAAOW,GAAP,EAAY;AACZZ,QAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,KAAK,oBAAP,EAArB;AACD;AACF,C","file":"Auth.js","sourcesContent":["import jwt from \"jsonwebtoken\";\r\nimport { JWT_SECRET } from \"../config\";\r\n\r\nexport default (req, res, next) => {\r\n  const token = req.header(\"x-auth-token\");\r\n\r\n  if (!token) {\r\n    return res.status(401).json({ msg: \"No token, authorization denied\" });\r\n  }\r\n\r\n  try {\r\n    const decoded = jwt.verify(token, JWT_SECRET);\r\n    req.user = decoded.user;\r\n    next();\r\n  } catch (err) {\r\n    res.status(401).json({ msg: \"Token is not valid\" });\r\n  }\r\n};\r\n"]}